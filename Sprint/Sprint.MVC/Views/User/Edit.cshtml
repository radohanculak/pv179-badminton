@using Sprint.Common.Enums;
@using System.Web.Mvc.Html;

@model Sprint.MVC.Models.User.UserUpsertModel

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-group">
        @Html.LabelFor(x => x.FirstName)
        @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.FirstName, null, new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(x => x.LastName)
        @Html.TextBoxFor(x => x.LastName, new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.LastName, null, new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(x => x.Email)
        @Html.TextBoxFor(x => x.Email, new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.Email, null, new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(x => x.Password)
        @Html.PasswordFor(x => x.Password, new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.Password, null, new { @class = "text-danger" })
    </div>

    if (User.IsInRole("Admin"))
    {
        <div class="form-group">
            @Html.LabelFor(x => x.Role)
            @Html.DropDownList("Role", Html.GetEnumSelectList(typeof(UserRole)), "Select Role" ,new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.Role, null, new { @class = "text-danger" })
        </div>
    } 
    else
    {
        @Html.HiddenFor(x => x.Role)
    }

    @Html.HiddenFor(x => x.Id)
    <button type="submit" class="btn btn-primary">Submit</button>
}